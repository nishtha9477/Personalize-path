"use client";
import { OpenAI } from "openai";
import { useEffect, useState } from "react";



const openai = new OpenAI({
  apiKey: process.env.NEXT_PUBLIC_OPENAI_API_KEY,
  dangerouslyAllowBrowser: true,
});

async function makeChatRequest(promptInput) {
  return openai.chat.completions.create({
    messages: [{ role: "system", content: promptInput }],
    model: "gpt-3.5-turbo",
  });
}

async function getResult(languages, frameworks) {
  let prompt = `Give me the JSON for an array object called "paths" containing 10 learning paths that suggest user for learning new programming skills which are related to what he knows. Paths should be in the form of objects which have title, description and skills (new or old) as keys. The user knows [${languages}] language(s).`;

  if (frameworks) {
    prompt += ` The user knows [${frameworks}] frameworks.`;
  }

  return await makeChatRequest(prompt)
    .then((res) => {
      return res.choices[0].message.content;
    })
    .catch((err) => {
      return err;
    });
}
 function Loading() {
 return (
    <main
className=" max-w-7xl mx-auto px-8 sm:px-16 w-screen"
id="mainContent"
>
<div className="flex flex-col items-center h-full gap-10 justify-center max-w-3xl mx-auto text-center">
  <h1 className="text-3xl font-bold text-center text-gray-900 dark:text-gray-100">
   Learning path ‼️
  </h1>
  <p className="text-gray-500 dark:text-gray-400">
  Start with the basics: learn syntax, data types, control structures, and functions, then advance to object-oriented programming (OOP) principles like classes, inheritance, and polymorphism.
  Dive into advanced features such as templates, exception handling, and memory management, and explore concurrency with threads, mutexes, and atomic operations.. Please
    
  </p>
  <button><a href={"/"}
className="font-bold text-xl text-gray-800 dark:text-gray-200"
>Go next</a></button>


    
  <p className="text-gray-500 dark:text-gray-400">
    For more information, open the console. (⌘ + ⌥ + I)
  </p>
</div>
</main>
  );
 }

function Result({ paths }) {
  return (
    <div className="text-center text-gray-500 dark:text-gray-400 max-w-3xl w-full h-full flex flex-col gap-6">
      <h1 className="text-3xl font-bold text-center text-gray-900 dark:text-gray-100">
        Paths Generated
      </h1>
      <p className="text-center text-gray-500 dark:text-gray-400 max-w-3xl">
        {" "}
        These are the paths generated by the AI. There is no guarantee that
        these are correct or relevant.
      </p>
      {paths.map((path, index) => (
        <div
          className="flex flex-col max-w-3xl w-full gap-2 bg-gray-200 dark:bg-neutral-950 p-4 rounded-xl border border-gray-400 dark:border-neutral-800"
          key={index}
        >
          <h1 className="text-2xl font-bold text-center text-gray-900 dark:text-gray-100">
            {path.title}
          </h1>
          <p className="text-center text-gray-500 dark:text-gray-400 max-w-3xl">
            {path.description}
          </p>
          <div className="w-full overflow-x-scroll">
            <div className="flex w-fit gap-2 mx-auto">
              {path.skills.map((skill, index) => (
                <p
                  className="bg-gray-100 border border-gray-300 dark:border-neutral-800 dark:bg-neutral-900 px-2 py-1 rounded-lg text-gray-700 dark:text-gray-300 whitespace-nowrap"
                  key={index}
                >
                  {skill}
                </p>
              ))}
            </div>
          </div>
        </div>
      ))}
    </div>
  );
}

export default function Home() {
  const [data, setData] = useState(null);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      if (sessionStorage.getItem("userKnowledge")) {
        try {
          const userKnowledge = JSON.parse(
            sessionStorage.getItem("userKnowledge")
          );
          const result = await getResult(
            userKnowledge.lang,
            userKnowledge.framework
          );
          const parsedResult = JSON.parse(result);
          if (parsedResult) {
            parsedResult.paths.map((path) => [
              path.title,
              path.description,
              path.skills,
            ]); // To test if the result is in the correct format
            setData(parsedResult.paths);
          }
        } catch (err) {
          setError(err);
        }
      }
    };

    fetchData();
  }, []);
    // model 
   
  // if (error) {
  //   return (
      
  //   );
  // }

  return (
    <main className=" max-w-7xl mx-auto px-8 sm:px-16 w-screen">
      <div className="flex flex-col items-center h-full gap-10 justify-center">
        {data ? <Result paths={data} /> : <Loading />}
      </div>
    </main>
  );
}